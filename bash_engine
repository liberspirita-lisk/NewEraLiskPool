#!/bin/bash

source config
cd $path_pool
# Extraction des votants heroes 
for elem in "${heroes[@]}" ; do
	$path_psql"psql" -d $psql_db -t -A -F"," -c " SELECT t1.\"dependentId\", t2.\"username\",t2.\"address\",t2.\"publicKey\", t2.\"balance\" power 
	from mem_accounts2delegates t1 
	join mem_accounts t2 on t2.\"address\" = t1.\"accountId\" where t1.\"dependentId\"='$elem' and  t2.\"balance\" > $min_balance " >> $path_pool"votersheroes.csv"
done
# Extraction des votants zeroes 
for elem in "${zeroes[@]}" ; do
	$path_psql"psql" -d $psql_db -t -A -F"," -c " SELECT t1.\"dependentId\", t2.\"username\",t2.\"address\",t2.\"publicKey\", t2.\"balance\" power 
	from mem_accounts2delegates t1 
	join mem_accounts t2 on t2.\"address\" = t1.\"accountId\" where t1.\"dependentId\"='$elem' and  t2.\"balance\" > $min_balance " >> $path_pool"voterszeroes.csv"
done
/usr/bin/sqlite3 $path_pool$db_sqlite < $path_pool"import_votants.sql"

# Extraction des données delegate heroes
for elem in "${heroes[@]}" ; do
	$path_psql"psql" -d $psql_db -t -A -F"," -c "select \"username\",\"address\",\"publicKey\",\"balance\",\"rank\" from \"mem_accounts\" where \"publicKey\" = '\\x$elem'" >> $path_pool"heroes.csv"
done

# Extraction des données delegate zeroes
for elem in "${zeroes[@]}" ; do
	$path_psql"psql" -d $psql_db -t -A -F"," -c "select \"username\",\"address\",\"publicKey\",\"balance\",\"rank\" from \"mem_accounts\" where \"publicKey\" = '\\x$elem'" >> $path_pool"zeroes.csv"
done


# import dans SQLITE3 base pool.db3
# et quelques traitements
/usr/bin/sqlite3 -batch $path_pool$db_sqlite < $path_pool"import_sqlite.sql"

# Nettoyage fichiers interface
rm $path_pool'heroes.csv'
rm $path_pool'zeroes.csv'
rm $path_pool'votersheroes.csv'
rm $path_pool'voterszeroes.csv'

# Ganissage tables
# table config
/usr/bin/sqlite3 -batch $path_pool$db_sqlite  "INSERT or REPLACE INTO config (delegate, address, publickey,rank,address_revenues,path_pool,path_psql, psql_db,  tx_redistribution, min_balance, db_sqlite, current_balance,payout_seuil, secret1,secret2) 
		VALUES ('$pool_delegate'
		, (SELECT address from heroes where heroes.username='$pool_delegate')
		, substr((SELECT publickey from heroes where heroes.username='$pool_delegate'),3,100)
		, (SELECT rank from heroes where heroes.username='$pool_delegate')
		, '$taulier', '$path_pool','$path_psql','$psql_db','$tx_redistribution','$min_balance','$db_sqlite'
		, (SELECT balance from heroes where heroes.username='$pool_delegate')
		, $payout_seuil
		, '$secret1', '$secret2')"

# plafonnement comptes poolers
/usr/bin/sqlite3 -batch $path_pool$db_sqlite  "UPDATE voters_raw SET power = min(power,  $cap)"
# malus sur votes zeroes
/usr/bin/sqlite3 -batch $path_pool$db_sqlite  "UPDATE voters_raw  set power = power *(-1) where delegate in (select distinct substr(publickey,3,100) from zeroes) "

# garnissage voters 
/usr/bin/sqlite3 -batch $path_pool$db_sqlite  'INSERT or REPLACE  INTO voters (delegate, username, address, publickey, scoring)
SELECT delegate, username, address, publickey, total(power) FROM voters_raw group by delegate, username, address, publickey'

/usr/bin/sqlite3 -batch $path_pool$db_sqlite  'DELETE FROM voters WHERE address not in (select address from voters_raw) or scoring <0'

# Calcul scoring du taulier
/usr/bin/sqlite3 -batch $path_pool$db_sqlite  "UPDATE voters set scoring = max(
					((100-$tx_redistribution)*0.01) *
					(select sum(scoring) from voters where address != '$taulier'), scoring) 
					where address='$taulier' "

# calcul pending_payout
/usr/bin/sqlite3 -batch $path_pool$db_sqlite  'UPDATE voters set pending_payouts = pending_payouts+
		cast(((scoring / (SELECT sum(scoring) from voters)) 
			* ((SELECT sum(current_balance) FROM config)
			-(SELECT sum(pending_payouts) FROM voters))) as int)'
cd $path_pool
/usr/bin/php test_index.php
